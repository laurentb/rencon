#!/usr/bin/env python
from __future__ import absolute_import, print_function, unicode_literals

import argparse
import hashlib
import os
import sys
from string import Template


def hashfile(hasher, fp, bs=2**16):
    h = hasher()
    buf = fp.read(bs)
    while len(buf):
        h.update(buf)
        buf = fp.read(bs)
    return h


def rename(fpath, mask, out=sys.stdout, err=sys.stderr):
    if not os.path.exists(fpath):
        print("File %s does not exists." % fpath, file=err)
    else:
        with open(fpath) as fp:
            hsh = hashfile(hashlib.sha1, fp).hexdigest()
        ext = os.path.splitext(fpath)[1][1:]
        name = mask.substitute(hash=hsh, ext=ext)
        dest = os.path.join(os.path.dirname(fpath), name)
        if os.path.basename(fpath) == name:
            print("OK %s" % name, file=out)
        else:
            print("`%s' -> `%s'" % (fpath, dest), file=out)
            if os.path.exists(dest):
                print("Destination %s already exists." % dest, file=err)
            elif not args.pretend:
                os.rename(fpath, dest)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Rename files based on their content.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('files', metavar='FILE', nargs='+',
                        help="files to rename")
    parser.add_argument('-m', '--mask',
                        help="file destination mask", default='${hash}.${ext}')
    parser.add_argument('-p', '--pretend', action='store_true',
                        help="do not rename, just print")

    args = parser.parse_args()
    print("Renaming with mask: %s" % args.mask)
    mask = Template(args.mask)
    for fpath in args.files:
        rename(fpath, mask)
